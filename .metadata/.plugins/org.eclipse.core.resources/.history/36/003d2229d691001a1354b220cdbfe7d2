package pages;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;
import utilPackage.baseclass;

public class UpdateProfilePopup extends baseclass {
	
	@FindBy(xpath="//input[@id='Name']")
	WebElement Name;
	
	@FindBy(xpath="//input[@id='Email']")
	WebElement Email;
	
	@FindBy(xpath="//input[@id='ContactNumber']")
	WebElement ContactNumber;
	
	@FindBy(xpath="//select[@formcontrolname='CountryId']")
	WebElement Country;
	
	@FindBy(xpath="//input[@id='ExperienceInYears']")
	WebElement ExperienceinYears;
	
	@FindBy(xpath="//input[@id='CTC']")
	WebElement CTCperAnnum;
	
	@FindBy(xpath="//textarea[@id='agencyaddress']")
	WebElement Address;
	
	@FindBy(xpath="//input[@formcontrolname='OrganizationId']")
	WebElement OrganizationName;
	
	@FindBy(xpath="//input[@id='agencywebsite']")
	WebElement Website;
	
	@FindBy(xpath="//input[@id='Title']")
	WebElement Title;
	
	@FindBy(xpath="//input[@formcontrolname='Designation']")
	WebElement Designation;
	
	@FindBy(xpath="//input[@id='NoticePeriod']")
	WebElement Noticeperiod;
	
	@FindBy(xpath="//input[@formcontrolname='IndustryId']")
	WebElement Industry;
	
	@FindBy(xpath="//input[@formcontrolname='CurrentCity']")
	WebElement CityofCandidate;
	
	@FindBy(xpath="//input[@formcontrolname='CityId']")
	WebElement City;
	
	@FindBy(xpath="//select[@formcontrolname='Gender']")
	WebElement Gender;
	
	@FindBy(xpath="/html[1]/body[1]/ngb-modal-window[1]/div[1]/div[1]/app-candidate-profile[1]/div[2]/div[1]/div[1]/form[1]/div[2]/div[3]/table[1]/tbody[1]/tr[1]/td[4]/button[1]")
	WebElement DeleteCandidateSkill1;
	
	@FindBy(xpath="/html[1]/body[1]/ngb-modal-window[1]/div[1]/div[1]/app-candidate-profile[1]/div[2]/div[1]/div[1]/form[1]/div[2]/div[3]/table[1]/tbody[1]/tr[2]/td[4]/button[1]")
	WebElement DeleteCandidateSkill2;
	
	@FindBy(css="body.modal-open:nth-child(2) ngb-modal-window.modal.fade.show.d-block.JobDashboardModal:nth-child(7) div.modal-dialog div.modal-content div.modal-body.ModalBodyHeight div.row div.col-md-12 form.ng-untouched.ng-pristine.ng-invalid div.row:nth-child(2) div.col-md-8.mt-2:nth-child(3) table.table.table-bordered tbody.ng-untouched.ng-pristine.ng-invalid tr.ng-untouched.ng-pristine.ng-invalid:nth-child(3) td.text-center:nth-child(4) > button.btn.btn-outline-danger")
	WebElement DeleteCandidateSkill3;
	
	@FindBy(xpath="/html[1]/body[1]/ngb-modal-window[1]/div[1]/div[1]/app-candidate-profile[1]/div[2]/div[1]/div[1]/form[1]/div[2]/div[4]/table[1]/tbody[1]/tr[1]/td[2]/button[1]")
	WebElement DeleteRole1;
	
	@FindBy(xpath="/html[1]/body[1]/ngb-modal-window[1]/div[1]/div[1]/app-candidate-profile[1]/div[2]/div[1]/div[1]/form[1]/div[2]/div[4]/table[1]/tbody[1]/tr[2]/td[2]/button[1]")
	WebElement DeleteRole2;
	
	@FindBy(css="body.modal-open:nth-child(2) ngb-modal-window.modal.fade.show.d-block.JobDashboardModal:nth-child(7) div.modal-dialog div.modal-content div.modal-body.ModalBodyHeight div.row div.col-md-12 form.ng-untouched.ng-pristine.ng-invalid div.row:nth-child(2) div.col-md-4.pl-1.mt-2:nth-child(4) table.table.table-bordered tbody.ng-untouched.ng-pristine.ng-invalid tr.ng-untouched.ng-pristine.ng-invalid:nth-child(3) td.text-center > button.btn.btn-outline-danger")
	WebElement DeleteRole3;
	
	@FindBy(xpath="//button[@id='confirmModalCloseBtn']")
	WebElement ClickNoBtn;
	
	@FindBy(xpath="//button[contains(text(),'Close')]")
	WebElement ClickCloseBtn;
	
	@FindBy(xpath="//input[@formcontrolname='Skill']")
	WebElement CandidateSkill;
	
	@FindBy(xpath="//select[@formcontrolname='ExpertiseLevel']")
	WebElement ExpertiseLevel;
	
	@FindBy(xpath="//input[@formcontrolname='Role']")
	WebElement Role;
	
	@FindBy(xpath="//button[contains(text(),'Save')]")
	WebElement Savebtn;
	
	//Initializing the Page objects
	
	public UpdateProfilePopup() {     //constructor
		
		PageFactory.initElements(driver, this);
		this.driver = driver;
	}
		
	//Actions
	public void UpdateProfileEmployer (String EmployerAddress, String EmployerOrganizationName, String EmployerWebsite, String EmployerCity) {
				
		Address.sendKeys(EmployerAddress);
	    OrganizationName.sendKeys(EmployerOrganizationName);
	    Website.sendKeys(EmployerWebsite);
	    City.sendKeys(EmployerCity);
	}
		
	public void UpdateProfileAgency (String AgencyAddress, String AgencyOrganizationName, String AgencyWebsite, String AgencyCity) {
				
		Address.sendKeys(AgencyAddress);
	    OrganizationName.sendKeys(AgencyOrganizationName);
	    Website.sendKeys(AgencyWebsite);
	    City.sendKeys(AgencyCity);
	}
		
	public void UpdateProfileCandidate (String title, String designation, String noticeperiod, String CandidateCity, String industry, String gender) {
				
		Title.sendKeys(title);
		Designation.sendKeys(designation);
		Designation.click();
		Noticeperiod.sendKeys(noticeperiod);
		Industry.sendKeys(industry);
		Industry.click();
		CityofCandidate.sendKeys(CandidateCity);
		CityofCandidate.click();
				
		Select select = new Select (Gender);
		select.selectByVisibleText(gender);
	}
		
	public void DeleteCandidateSkillsandRoles() {
			
		DeleteCandidateSkill1.click();
		DeleteRole1.click();
		DeleteCandidateSkill2.click();
		DeleteRole2.click();
	}
		
     public void AddCandidateSkillandRole(String expertiselevel) {
			
		CandidateSkill.sendKeys("Java");
			
		Select select = new Select(ExpertiseLevel);
		select.selectByVisibleText(expertiselevel);
		Role.sendKeys("Engineer");
	}
		
     public void MakeChangesinAgencyUpdateProfile(String organizationname) {
    	   
    	 OrganizationName.clear();
		 OrganizationName.sendKeys(organizationname);	
     }
       
     public void MakeChangesinEmployerUpdateProfile(String organizationname) {
    	   
    	 OrganizationName.clear();
		 OrganizationName.sendKeys(organizationname);		
     }

     public void ClickNoBtn() {
			
		 ClickNoBtn.click();	
     }
       
     public void ClickSaveBtn() {
			
   		 Savebtn.click();
   				
     }
       
     public void ClickCloseBtn() {
			
   		 ClickCloseBtn.click();
     }
     
     public void VerifyAutoPopulatedFieldsOnUpdateCandidateProfile () {
    	   
    	   if (Title.getAttribute("value").isEmpty()) {
    		   
    		   System.out.println("Title field is blank and it is not autopopulated");
    		   
    	   }else {
    		   
    		   System.out.println("Title field is autopopulated on Update Profile Popup Window");
    	   }
    	   
    	   if (Name.getAttribute("value").isEmpty()) {
    		   
               System.out.println("Name field is blank and it is not autopopulated");
    		   
    	   }else {
    		   
       		   System.out.println("Name field is autopopulated on Update Profile Popup Window");
    	   }
    	   
    	   if (Email.getAttribute("value").isEmpty()) {
   		   
   		         System.out.println("Email field is blank and it is not autopopulated");
   		   
   	       }else {
   		   
   	    	System.out.println("Email field is autopopulated on Update Profile Popup Window");
   	       }
    	   
    	   if (ContactNumber.getAttribute("value").isEmpty()) {
      		   
		          System.out.println("ContactNumber field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("ContactNumber field is autopopulated on Update Profile Popup Window");
	       }
 
    	   if (Designation.getAttribute("value").isEmpty()) {
    		   
             System.out.println("Designation field is blank and it is not autopopulated");
		   
	       }else {
		   
		         System.out.println("Designation field is autopopulated on Update Profile Popup Window");
	       }
         
    	   if (Noticeperiod.getAttribute("value").isEmpty()) {
              
		         System.out.println("NoticePeriod field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("NoticePeriod field is autopopulated on Update Profile Popup Window");
	       }

    	   if (Industry.getAttribute("value").isEmpty()) {
              
		        System.out.println("Industry field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("Industry field is autopopulated on Update Profile Popup Window");   
	       }

    	   if (Country.getAttribute("value").isEmpty()) {
              
		        System.out.println("Country field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("Country field is autopopulated on Update Profile Popup Window");
	       }
          
    	   if (CityofCandidate.getAttribute("value").isEmpty()) {
              
		         System.out.println("City field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("City field is autopopulated on Update Profile Popup Window");
	       }

    	   if (Gender.getAttribute("value").isEmpty()) {
              
		         System.out.println("Gender field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("Gender field is autopopulated on Update Profile Popup Window");
	       }

    	   if (ExperienceinYears.getAttribute("value").isEmpty()) {
              
		        System.out.println("Experience (in Years)field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("Experience (in Years) field is autopopulated as 0 on Update Profile Popup Window");
	       }
 	   
    	   if (CTCperAnnum.getAttribute("value").isEmpty()) {
              
		        System.out.println("CTC (Per Annum) field is blank and it is not autopopulated");
		   
	       }else {
		   
	    	   System.out.println("CTC (Per Annum) field is autopopulated as 0 on Update Profile Popup Window");
	     }
       
       }
}







