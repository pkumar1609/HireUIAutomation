package addAndDeleteSkillsAndRoles;

import java.util.List;

import org.openqa.selenium.By;

import cucumber.api.DataTable;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import utilPackage.baseclass;

public class addAndDeleteSkillsAndRoles extends baseclass {
	

@Given("^User is on Home page of application$")
public void user_is_on_Home_page_of_application() throws Throwable {
    
	baseclass.initialization();
}

@When("^title of page is HireXpert$")
public void title_of_page_is_HireXpert() throws Throwable {
    
	String title = loginpage.validateTitle();
	System.out.println("Title of page: " + title);
}

@When("^enter valid user email address and password for registered candidate and click on Sign in button$")
public void enter_valid_user_email_address_and_password_for_registered_candidate_and_click_on_Sign_in_button(DataTable dt) throws Throwable {
    
	List<List<String>> data = dt.raw();
	loginpage.emailaddress.sendKeys(data.get(0).get(0));
	loginpage.password.sendKeys(data.get(0).get(1));
	loginpage.signin.click();
	
	Thread.sleep(5000);
}

@When("^go to Profile section and then Update Profile page$")
public void go_to_Profile_section_and_then_Update_Profile_page() throws Throwable {
    
	workbenchpage.openUpdateProfilePage();
	Thread.sleep(3000);
}

@When("^click on Add Skill button to add one skill$")
public void click_on_Add_Skill_button_to_add_one_skill() throws Throwable {
    
	candidateupdateprofilepage.addSkillButton.click();
}

@When("^add skill, expertise level and certificate$")
public void add_skill_expertise_level_and_certificate(DataTable dt) throws Throwable {
    
	List<List<String>> data = dt.raw();
	candidateupdateprofilepage.skill2.sendKeys(data.get(0).get(0));
	Thread.sleep(1000);
	candidateupdateprofilepage.selectExpertiseLevel2();
	Thread.sleep(1000);
	candidateupdateprofilepage.certificate2.sendKeys(data.get(0).get(1));
	Thread.sleep(1000);
}

@When("^fill other mandatory details and click on Save button$")
public void fill_other_mandatory_details_and_click_on_Save_button() throws Throwable {
    
	candidateupdateprofilepage.saveButton.click();
	Thread.sleep(2000);
}

@Then("^entered certificate should appear in skill section on candidate dashboard$")
public void entered_certificate_should_appear_in_skill_section_on_candidate_dashboard() throws Throwable {
    
	workbenchpage.openUpdateProfilePage();
	candidatedashboardpage.findSkillAndCertificate();
	candidatedashboardpage.skillsRefreshButton.click();
	Thread.sleep(3000);
//	driver.navigate().refresh();
	
}

@Then("^again go to update profile and delete certificate value of the skill and click on save button$")
public void again_go_to_update_profile_and_delete_certificate_value_of_the_skill_and_click_on_save_button() throws Throwable {
    
	workbenchpage.openUpdateProfilePage();
	Thread.sleep(3000);
	candidateupdateprofilepage.certificate2.clear();
	Thread.sleep(2000);
	candidateupdateprofilepage.saveButton.click();
	Thread.sleep(3000);
	candidatedashboardpage.skillsRefreshButton.click();
	Thread.sleep(3000);
}

@Then("^again go to update profile and verify all changes are saved$")
public void again_go_to_update_profile_and_verify_all_changes_are_saved() throws Throwable {
	
	candidateupdateprofilepage.openUpdateProfilePage();
	Thread.sleep(2000);
	String certificatevalue = candidateupdateprofilepage.certificate2.getText();
	
	if(certificatevalue.equals("")) {
		System.out.println("\nCertificate deleted successfully..");
	}
	else{
		System.out.println("\nCertificate not deleted..");
	}
}

@Then("^all changes should be saved$")
public void all_changes_should_be_saved() throws Throwable {
    
//	System.out.println("");
}

@Then("^Click on Add Skill button to add more than ten skills and observe$")
public void click_on_Add_Skill_button_to_add_more_than_ten_skills_and_observe() throws Throwable {
    
	Thread.sleep(3000);
	candidateupdateprofilepage.addTenSkills();
	System.out.println("\nNew skill rows get added..");
}

@Then("^one job skill row should get added after clicking on Add Skill button and user should able to add only ten skills and error message should display$")
public void one_job_skill_row_should_get_added_after_clicking_on_Add_Skill_button_and_user_should_able_to_add_only_ten_skills_and_error_message_should_display() throws Throwable {
    
	System.out.println("User not able to add more than 10 skills");
    System.out.println("Error message displayed like: Candidate should not add more than 10 skills");
    Thread.sleep(2000);
    driver.findElement(By.id("alertModalCloseBtn")).click();
    Thread.sleep(2000);
}

@Then("^click on Delete Skill button in front of any skill$")
public void click_on_Delete_Skill_button_in_front_of_any_skill() throws Throwable {
    
	candidateupdateprofilepage.skill3Delete.click();
}

@Then("^after clicking on Delete Skill button present in front of skill then that skill row should get deleted$")
public void after_clicking_on_Delete_Skill_button_present_in_front_of_skill_then_that_skill_row_should_get_deleted() throws Throwable {
    
	System.out.println("Selected skill get deleted");
}

@Then("^Click on Add Role button and observe$")
public void click_on_Add_Role_button_and_observe() throws Throwable {
    
	Thread.sleep(2000);
	candidateupdateprofilepage.addThreeRoles();
	System.out.println("\nNew role rows get added..");
}

@Then("^one row should get added after clicking on Add Role button and user should able to add only three roles$")
public void one_row_should_get_added_after_clicking_on_Add_Role_button_and_user_should_able_to_add_only_three_roles() throws Throwable {
    
	System.out.println("User not able to add more than 3 roles");
    System.out.println("Error message displayed like: Candidate should not add more than 3 roles");
    Thread.sleep(2000);
    driver.findElement(By.id("alertModalCloseBtn")).click();
    Thread.sleep(2000);
}

@Then("^click on Delete Role button in front of any role$")
public void click_on_Delete_Role_button_in_front_of_any_role() throws Throwable {
    
	candidateupdateprofilepage.role3Delete.click();
}

@Then("^after clicking on Delete Role button present in front of role then that role should get deleted$")
public void after_clicking_on_Delete_Role_button_present_in_front_of_role_then_that_role_should_get_deleted() throws Throwable {
    
	System.out.println("Selected role get deleted");
}

@Then("^close the browser$")
public void close_the_browser() throws Throwable {
    
	Thread.sleep(5000);
	driver.quit();
}

}
