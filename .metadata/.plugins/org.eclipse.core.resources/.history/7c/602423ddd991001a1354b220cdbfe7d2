package candidateProfile;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.List;


import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;

import cucumber.api.DataTable;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import utilPackage.baseclass;

public class candidateProfile extends baseclass {
	
@Given("^User is on Home page of application$")
public void user_is_on_Home_page_of_application() throws Throwable {
    
	baseclass.initialization();
}

@When("^title of page is HireXpert$")
public void title_of_page_is_HireXpert() throws Throwable {
    String title = loginpage.validateTitle();
    System.out.println("Title of page: " + title);
}

@When("^enter valid user email address and password for employer and click on Sign in button$")
public void enter_valid_user_email_address_and_password_for_employer_and_click_on_Sign_in_button(DataTable dt) throws Throwable {
	
	List<List<String>> data = dt.raw();
	loginpage.emailaddress.sendKeys(data.get(0).get(0));
	loginpage.password.sendKeys(data.get(0).get(1));
	loginpage.signin.click();
    Thread.sleep(5000);
}

@When("^click on Workbench tab and select job from Jobs drop down$")
public void click_on_Workbench_tab_and_select_job_from_Jobs_drop_down() throws Throwable {
    
	dashboardpage.openWorkbenchPage();
    Thread.sleep(3000);
    workbenchpage.selectJob();
    Thread.sleep(3000);
}

@When("^click on Add Candidate button$")
public void click_on_Add_Candidate_button() throws Throwable {
    
	workbenchpage.addCandidateButton.click();
	Thread.sleep(3000);
}

@When("^enter email id of candidate which is not registered previously and click on Find button$")
public void enter_email_id_of_candidate_which_is_not_registered_previously_and_click_on_Find_button(DataTable dt) throws Throwable {
    
	List<List<String>> data = dt.raw();
	
	addcandidatepage.emailField.sendKeys(data.get(0).get(0));
	addcandidatepage.FindButton.click();
	Thread.sleep(3000);
}

@When("^Fill all mandatory details and click on Save button$")
public void fill_all_mandatory_details_and_click_on_Save_button(DataTable dt) throws Throwable {
    
	addcandidatepage.validatePageTitle();
	
	List<List<String>> data = dt.raw();
	
	addcandidatepage.name.sendKeys(data.get(0).get(0));
	Thread.sleep(1000);
	addcandidatepage.contactNumber.sendKeys(data.get(0).get(1));
	Thread.sleep(1000);
	addcandidatepage.designation.sendKeys(data.get(0).get(2));
	Thread.sleep(1000);
	driver.findElement(By.xpath("//*[@id=\"style-5\"]/div/div[1]/form/div[2]/div[1]/div/div/div[2]")).click();  //click outside 
	addcandidatepage.selectGender();
	Thread.sleep(1000);
	addcandidatepage.noticePeriod.sendKeys(data.get(0).get(3));
	Thread.sleep(1000);
	addcandidatepage.location.sendKeys(data.get(0).get(4));
	Thread.sleep(1000);
	addcandidatepage.selectCommunicationMode();
	Thread.sleep(1000);
	driver.findElement(By.xpath("//*[@id=\"style-5\"]/div/div[1]/form/div[2]/div[1]/div/div/div[2]")).click();  //click outside 
	addcandidatepage.selectExpertiseLevel();
	
	addcandidatepage.saveButton.click();
}

@When("^click on Yes button if probability related fields are not filled and observe$")
public void click_on_Yes_button_if_probability_related_fields_are_not_filled_and_observe() throws Throwable {
    
	addcandidatepage.yesButtonProbabilityPopup.click();
	Thread.sleep(3000);
}

@Then("^new candidate should get added in New column$")
public void new_candidate_should_get_added_in_New_column() throws Throwable {
    
	System.out.println("New candidate get added to the job..");
}

@Then("^logout with employer and login with new candidate added by employer$")
public void logout_with_employer_and_login_with_new_candidate_added_by_employer(DataTable dt) throws Throwable {
    
//	workbenchpage.ClickonLogout();
	WebElement we = driver.findElement(By.xpath("//img[@class='profile']"));
	Actions action = new Actions(driver);
	action.moveToElement(we).perform();
	driver.findElement(By.xpath("//a[contains(text(),'Log Out')]")).click();
	Thread.sleep(3000);
	
	List<List<String>> data = dt.raw();
	loginpage.emailaddress.sendKeys(data.get(0).get(0));
	loginpage.password.sendKeys(data.get(0).get(1));
	loginpage.signin.click();
	Thread.sleep(5000);
}

@Then("^Update profile pop up will appears$")
public void update_profile_pop_up_will_appears() throws Throwable {
    
	String title = driver.findElement(By.xpath("/html/body/ngb-modal-window/div/div/app-candidate-profile/div[1]/h5")).getText();
	System.out.println("\nTitle of page: " + title);
	Thread.sleep(2000);
}

@Then("^observe the auto-populated fields on the update candidate profile popup$")
public void observe_the_auto_populated_fields_on_the_update_candidate_profile_popup() throws Throwable {
    
	candidateupdateprofilepage.autoPopulatedData();
}

@Then("^all filled information should auto populate if candidate added through employer$")
public void all_filled_information_should_auto_populate_if_candidate_added_through_employer() throws Throwable {
    
	System.out.println("\nAll information displayed on Update Profile page of candidate..");
}

@Then("^observe email id field from candidate profile$")
public void observe_email_id_field_from_candidate_profile() throws Throwable {
    
	candidateupdateprofilepage.verifyEmail();
	Thread.sleep(2000);
}

@Then("^Select the On Notice Period field and set last working day on Update Profile page$")
public void select_the_On_Notice_Period_field_and_set_last_working_day_on_Update_Profile_page() throws Throwable {
    
	candidateupdateprofilepage.noticePeriodCheckbox.click();
	Thread.sleep(1000);
	candidateupdateprofilepage.lastWorkingDay.sendKeys("31/05/2020");
	Thread.sleep(2000);
}

@Then("^Click on Save button and again go to Update Profile page$")
public void click_on_Save_button_and_again_go_to_Update_Profile_page() throws Throwable {
    
	candidateupdateprofilepage.saveButton.click();
	Thread.sleep(3000);
	workbenchpage.openUpdateProfilePage();
	Thread.sleep(3000);
}

@Then("^Observe the Last Working Day field$")
public void observe_the_Last_Working_Day_field() throws Throwable {
    
	candidateupdateprofilepage.lastWorkingDay.click();
	
	String lastworkingday = candidateupdateprofilepage.lastWorkingDay.getAttribute("value");
	System.out.println("\nLast Working day: " +lastworkingday);
}

@Then("^Last Working date should get updated properly$")
public void last_Working_date_should_get_updated_properly() throws Throwable {
    
	System.out.println("Data displayed properly..");
}

@Then("^do not make any changes on Update Profile page and click on Close button$")
public void do_not_make_any_changes_on_Update_Profile_page_and_click_on_Close_button() throws Throwable {
    
	candidateupdateprofilepage.closeButton.click();
	Thread.sleep(2000);
}

@Then("^update profile page should get closed and candidate dashboard should display$")
public void update_profile_page_should_get_closed_and_candidate_dashboard_should_display() throws Throwable {
    
	System.out.println("\nUpdate Profile page get closed and candidate dashboard displayed..");
}

@Then("^close the browser$")
public void close_the_browser() throws Throwable {
    
	Thread.sleep(3000);
	driver.quit();
}

}
